--lpm_counter DEVICE_FAMILY="MAX V" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=4 aclr clock cnt_en q
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_counter 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION maxv_lcell (aclr, aload, cin, clk, dataa, datab, datac, datad, ena, inverta, regcascin, sclr, sload)
WITH ( cin0_used, cin1_used, cin_used, lut_mask, operation_mode, output_mode, power_up, register_cascade_mode, sum_lutc_input, synch_mode, x_on_violation)
RETURNS ( combout, cout, regout);

--synthesis_resources = lut 4 
SUBDESIGN cntr_mka
( 
	aclr	:	input;
	clock	:	input;
	cnt_en	:	input;
	q[3..0]	:	output;
) 
VARIABLE 
	counter_cella0 : maxv_lcell
		WITH (
			cin_used = "false",
			lut_mask = "66AA",
			operation_mode = "arithmetic",
			synch_mode = "on"
		);
	counter_cella1 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "6AA0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella2 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "6AA0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella3 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "6AA0",
			operation_mode = "normal",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	aclr_actual	: WIRE;
	clk_en	: NODE;
	data[3..0]	: NODE;
	s_val[3..0]	: WIRE;
	safe_q[3..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	sset_node	: WIRE;

BEGIN 
	counter_cella[3..0].aclr = aclr_actual;
	counter_cella[3..0].aload = B"0000";
	counter_cella[1].cin = counter_cella[0].cout;
	counter_cella[2].cin = counter_cella[1].cout;
	counter_cella[3].cin = counter_cella[2].cout;
	counter_cella[3..0].clk = clock;
	counter_cella[3..0].dataa = safe_q[];
	counter_cella[3..0].datab = cnt_en;
	counter_cella[3..0].datac = ((sset & s_val[]) # ((! sset) & data[]));
	counter_cella[3].datad = B"1";
	counter_cella[3..0].ena = clk_en;
	counter_cella[3..0].sclr = sclr;
	counter_cella[3..0].sload = (sset_node # sload);
	aclr_actual = aclr;
	clk_en = VCC;
	data[] = GND;
	q[] = safe_q[];
	s_val[] = B"1111";
	safe_q[] = counter_cella[3..0].regout;
	sclr = GND;
	sload = GND;
	sset = GND;
	sset_node = B"0";
END;
--VALID FILE
